ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.eabi_attribute 23, 1
   3              		.eabi_attribute 24, 1
   4              		.eabi_attribute 25, 1
   5              		.eabi_attribute 26, 1
   6              		.eabi_attribute 30, 4
   7              		.eabi_attribute 34, 0
   8              		.eabi_attribute 18, 4
   9              		.file	"stm32l0xx_hal_cortex.c"
  10              		.text
  11              	.Ltext0:
  12              		.cfi_sections	.debug_frame
  13              		.section	.text.HAL_NVIC_SetPriority,"ax",%progbits
  14              		.align	1
  15              		.global	HAL_NVIC_SetPriority
  16              		.arch armv6s-m
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	HAL_NVIC_SetPriority:
  23              	.LVL0:
  24              	.LFB47:
  25              		.file 1 "smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c"
   1:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
   2:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ******************************************************************************
   3:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @file    stm32l0xx_hal_cortex.c
   4:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @author  MCD Application Team
   5:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief   CORTEX HAL module driver.
   6:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This file provides firmware functions to manage the following 
   7:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          functionalities of the CORTEX:
   8:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *           + Initialization and Configuration functions
   9:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *           + Peripheral Control functions 
  10:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  11:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   @verbatim  
  12:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
  13:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                         ##### How to use this driver #####
  14:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
  15:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]  
  16:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     *** How to configure Interrupts using CORTEX HAL driver ***
  17:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     ===========================================================
  18:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]     
  19:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     This section provides functions allowing to configure the NVIC interrupts (IRQ).
  20:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     The Cortex M0+ exceptions are managed by CMSIS functions.
  21:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       (#) Enable and Configure the priority of the selected IRQ Channels. 
  22:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****              The priority can be 0..3. 
  23:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  24:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         -@- Lower priority values gives higher priority.
  25:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         -@- Priority Order:
  26:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****             (#@) Lowest priority.
  27:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****             (#@) Lowest hardware priority (IRQn position).  
  28:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     
  29:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****      (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority() 
  30:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  31:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****      (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ() 
  32:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       
  33:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]  
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 2


  34:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     *** How to configure Systick using CORTEX HAL driver ***
  35:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     ========================================================
  36:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]
  37:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     Setup SysTick Timer for time base.
  38:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****            
  39:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
  40:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        is a CMSIS function that:
  41:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick Reload register with value passed as function parameter.
  42:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick IRQ priority to the lowest value (0x03).
  43:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Resets the SysTick Counter register.
  44:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
  45:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Enables the SysTick Interrupt.
  46:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****         (++) Starts the SysTick Counter.
  47:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 	
  48:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the function
  49:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
  50:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        HAL_SYSTICK_Config() function call. The HAL_SYSTICK_CLKSourceConfig() function is defined
  51:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        inside the stm32l0xx_hal_cortex.c file.
  52:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  53:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) You can change the SysTick IRQ priority by calling the
  54:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function
  55:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS funct
  56:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  57:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    (+) To adjust the SysTick time base, use the following formula:
  58:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                             
  59:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
  60:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
  61:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****        (++) Reload Value should not exceed 0xFFFFFF
  62:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    
  63:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   @endverbatim
  64:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ******************************************************************************
  65:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @attention
  66:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  67:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * <h2><center>&copy; Copyright(c) 2016 STMicroelectronics.
  68:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * All rights reserved.</center></h2>
  69:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  70:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  71:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * the "License"; You may not use this file except in compliance with the
  72:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * License. You may obtain a copy of the License at:
  73:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  74:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *
  75:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ******************************************************************************  
  76:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
  77:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  78:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Includes ------------------------------------------------------------------*/
  79:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** #include "stm32l0xx_hal.h"
  80:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  81:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup STM32L0xx_HAL_Driver
  82:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
  83:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
  84:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  85:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** #ifdef HAL_CORTEX_MODULE_ENABLED
  86:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  87:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX
  88:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief CORTEX HAL module driver
  89:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
  90:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 3


  91:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  92:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private types -------------------------------------------------------------*/
  93:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private variables ---------------------------------------------------------*/
  94:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private constants ---------------------------------------------------------*/
  95:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private macros ------------------------------------------------------------*/
  96:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Private functions ---------------------------------------------------------*/
  97:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /* Exported functions --------------------------------------------------------*/
  98:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
  99:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions
 100:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
 101:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 102:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 103:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 104:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions 
 105:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *  @brief    Initialization and Configuration functions 
 106:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *
 107:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @verbatim    
 108:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 109:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****               ##### Initialization and Configuration functions #####
 110:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 111:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]
 112:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       This section provides the CORTEX HAL driver functions allowing to configure Interrupts
 113:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       Systick functionalities 
 114:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 115:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @endverbatim
 116:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
 117:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 118:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 119:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 120:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Sets the priority of an interrupt.
 121:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 122:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of  IRQn_Type enumeration
 123:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)
 124:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  PreemptPriority The pre-emption priority for the IRQn channel.
 125:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be a value between 0 and 3.
 126:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         A lower priority value indicates a higher priority 
 127:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  SubPriority the subpriority level for the IRQ channel.
 128:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
 129:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         no subpriority supported in Cortex M0+ based products.   
 130:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 131:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 132:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
 133:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
  26              		.loc 1 133 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
 134:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 135:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  30              		.loc 1 135 3 view .LVU1
 136:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_SetPriority(IRQn,PreemptPriority);
  31              		.loc 1 136 3 view .LVU2
  32              	.LBB22:
  33              	.LBI22:
  34              		.file 2 "smtc_bsp/arm/cmsis/core_cm0plus.h"
   1:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**************************************************************************//**
   2:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * @file     core_cm0plus.h
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 4


   3:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * @version  V5.0.6
   5:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * @date     28. May 2018
   6:smtc_bsp/arm/cmsis/core_cm0plus.h ****  ******************************************************************************/
   7:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*
   8:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *
  10:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * SPDX-License-Identifier: Apache-2.0
  11:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *
  12:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * not use this file except in compliance with the License.
  14:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * You may obtain a copy of the License at
  15:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *
  16:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *
  18:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * Unless required by applicable law or agreed to in writing, software
  19:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * See the License for the specific language governing permissions and
  22:smtc_bsp/arm/cmsis/core_cm0plus.h ****  * limitations under the License.
  23:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
  24:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  25:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if   defined ( __ICCARM__ )
  26:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined (__clang__)
  28:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #pragma clang system_header   /* treat file as system include file */
  29:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
  30:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  31:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  32:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  33:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  34:smtc_bsp/arm/cmsis/core_cm0plus.h **** #include <stdint.h>
  35:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  36:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifdef __cplusplus
  37:smtc_bsp/arm/cmsis/core_cm0plus.h ****  extern "C" {
  38:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
  39:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  40:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
  41:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:smtc_bsp/arm/cmsis/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  44:smtc_bsp/arm/cmsis/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:smtc_bsp/arm/cmsis/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  46:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  47:smtc_bsp/arm/cmsis/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:smtc_bsp/arm/cmsis/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  49:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  50:smtc_bsp/arm/cmsis/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:smtc_bsp/arm/cmsis/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  52:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
  53:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  54:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  55:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*******************************************************************************
  56:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *                 CMSIS definitions
  57:smtc_bsp/arm/cmsis/core_cm0plus.h ****  ******************************************************************************/
  58:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
  59:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup Cortex-M0+
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 5


  60:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
  61:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
  62:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  63:smtc_bsp/arm/cmsis/core_cm0plus.h **** #include "cmsis_version.h"
  64:smtc_bsp/arm/cmsis/core_cm0plus.h ****  
  65:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*  CMSIS CM0+ definitions */
  66:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [3
  67:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (__CM_CMSIS_VERSION_SUB)                   /*!< \deprecated [1
  68:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16U) | \
  69:smtc_bsp/arm/cmsis/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB           )  /*!< \deprecated CM
  70:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  71:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __CORTEX_M                   (0U)                                       /*!< Cortex-M Core 
  72:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  73:smtc_bsp/arm/cmsis/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:smtc_bsp/arm/cmsis/core_cm0plus.h ****     This core does not support an FPU at all
  75:smtc_bsp/arm/cmsis/core_cm0plus.h **** */
  76:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __FPU_USED       0U
  77:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  78:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined ( __CC_ARM )
  79:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
  80:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  81:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
  82:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  83:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  84:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if defined __ARM_PCS_VFP
  85:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  86:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
  87:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  88:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined ( __GNUC__ )
  89:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
  90:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  91:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
  92:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  93:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  94:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if defined __ARMVFP__
  95:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
  96:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
  97:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
  98:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined ( __TI_ARM__ )
  99:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if defined __TI_VFP_SUPPORT__
 100:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 101:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 102:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 103:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined ( __TASKING__ )
 104:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if defined __FPU_VFP__
 105:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 106:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 107:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 108:smtc_bsp/arm/cmsis/core_cm0plus.h **** #elif defined ( __CSMC__ )
 109:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #if ( __CSMC__ & 0x400U)
 110:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 111:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 112:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 113:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 114:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 115:smtc_bsp/arm/cmsis/core_cm0plus.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 116:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 6


 117:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 118:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifdef __cplusplus
 119:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 120:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 121:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 122:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 123:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 124:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 125:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 126:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 127:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 128:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 129:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifdef __cplusplus
 130:smtc_bsp/arm/cmsis/core_cm0plus.h ****  extern "C" {
 131:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 132:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 133:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* check device defines and use defaults */
 134:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 135:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 136:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000U
 137:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 138:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 139:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 140:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 141:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define __MPU_PRESENT             0U
 142:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 143:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 144:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 145:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 146:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define __VTOR_PRESENT            0U
 147:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 148:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 149:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 150:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 151:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2U
 152:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 153:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 154:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 155:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 156:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0U
 157:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 158:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 159:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 160:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 161:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 162:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 163:smtc_bsp/arm/cmsis/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 164:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 165:smtc_bsp/arm/cmsis/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 166:smtc_bsp/arm/cmsis/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 167:smtc_bsp/arm/cmsis/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 168:smtc_bsp/arm/cmsis/core_cm0plus.h **** */
 169:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifdef __cplusplus
 170:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 171:smtc_bsp/arm/cmsis/core_cm0plus.h **** #else
 172:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 173:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 7


 174:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 175:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 176:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 177:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* following defines should be used for structure members */
 178:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 179:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 180:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 181:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 182:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 183:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 184:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 185:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 186:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*******************************************************************************
 187:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *                 Register Abstraction
 188:smtc_bsp/arm/cmsis/core_cm0plus.h ****   Core Register contain:
 189:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core Register
 190:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core NVIC Register
 191:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core SCB Register
 192:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core SysTick Register
 193:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core MPU Register
 194:smtc_bsp/arm/cmsis/core_cm0plus.h ****  ******************************************************************************/
 195:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 196:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 197:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 198:smtc_bsp/arm/cmsis/core_cm0plus.h **** */
 199:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 200:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 201:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 202:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 203:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief      Core Register type definitions.
 204:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 205:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 206:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 207:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 208:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 209:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 210:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef union
 211:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 212:smtc_bsp/arm/cmsis/core_cm0plus.h ****   struct
 213:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 214:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
 215:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 216:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 217:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 218:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 219:smtc_bsp/arm/cmsis/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 220:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 221:smtc_bsp/arm/cmsis/core_cm0plus.h **** } APSR_Type;
 222:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 223:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* APSR Register Definitions */
 224:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 225:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 226:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 227:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 228:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 229:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 230:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 8


 231:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 232:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 233:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 234:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 235:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 236:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 237:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 238:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 239:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 240:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef union
 241:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 242:smtc_bsp/arm/cmsis/core_cm0plus.h ****   struct
 243:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 244:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 245:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 246:smtc_bsp/arm/cmsis/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 247:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 248:smtc_bsp/arm/cmsis/core_cm0plus.h **** } IPSR_Type;
 249:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 250:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* IPSR Register Definitions */
 251:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 252:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 253:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 254:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 255:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 256:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 257:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 258:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef union
 259:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 260:smtc_bsp/arm/cmsis/core_cm0plus.h ****   struct
 261:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 262:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 263:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
 264:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 265:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
 266:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 267:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 268:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 269:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 270:smtc_bsp/arm/cmsis/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 271:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 272:smtc_bsp/arm/cmsis/core_cm0plus.h **** } xPSR_Type;
 273:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 274:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* xPSR Register Definitions */
 275:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 276:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 277:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 278:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 279:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 280:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 281:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 282:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 283:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 284:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 285:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 286:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 287:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 9


 288:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 289:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 290:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 291:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 292:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 293:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 294:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 295:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Union type to access the Control Registers (CONTROL).
 296:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 297:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef union
 298:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 299:smtc_bsp/arm/cmsis/core_cm0plus.h ****   struct
 300:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 301:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 302:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 303:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
 304:smtc_bsp/arm/cmsis/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access */
 305:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access */
 306:smtc_bsp/arm/cmsis/core_cm0plus.h **** } CONTROL_Type;
 307:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 308:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* CONTROL Register Definitions */
 309:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 310:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 311:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 312:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 313:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 314:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 315:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 316:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 317:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 318:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 319:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 320:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 321:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief      Type definitions for the NVIC Registers
 322:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 323:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 324:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 325:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 326:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 327:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 328:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef struct
 329:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 330:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 331:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RESERVED0[31U];
 332:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 333:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RSERVED1[31U];
 334:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 335:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RESERVED2[31U];
 336:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 337:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RESERVED3[31U];
 338:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RESERVED4[64U];
 339:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
 340:smtc_bsp/arm/cmsis/core_cm0plus.h **** }  NVIC_Type;
 341:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 342:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 343:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 344:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 10


 345:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 346:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 347:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 348:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Type definitions for the System Control Block Registers
 349:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 350:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 351:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 352:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 353:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Structure type to access the System Control Block (SCB).
 354:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 355:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef struct
 356:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 357:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 358:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 359:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 360:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 361:smtc_bsp/arm/cmsis/core_cm0plus.h **** #else
 362:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RESERVED0;
 363:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 364:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 365:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 366:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 367:smtc_bsp/arm/cmsis/core_cm0plus.h ****         uint32_t RESERVED1;
 368:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 369:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 370:smtc_bsp/arm/cmsis/core_cm0plus.h **** } SCB_Type;
 371:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 372:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 373:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 374:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 375:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 376:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 377:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 378:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 379:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 380:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 381:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 382:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 383:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 384:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 385:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 386:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 387:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 388:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 389:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 390:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 391:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 392:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 393:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 394:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 395:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 396:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 397:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 398:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 399:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 400:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 401:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 11


 402:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 403:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 404:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 405:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 406:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 407:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 408:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 409:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 410:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 411:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 412:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 413:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 414:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 415:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 416:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 417:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 418:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB 
 419:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 420:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 421:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 422:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 423:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 424:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 425:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 426:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 427:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 428:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 429:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 430:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 431:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 432:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 433:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 434:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 435:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 436:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 437:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 438:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB System Control Register Definitions */
 439:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 440:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 441:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 442:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 443:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 444:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 445:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 446:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 447:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 448:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 449:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 450:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 451:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 452:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 453:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 454:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 455:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 456:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 457:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 458:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 12


 459:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 460:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 461:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 462:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 463:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 464:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 465:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Type definitions for the System Timer Registers.
 466:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 467:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 468:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 469:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 470:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Structure type to access the System Timer (SysTick).
 471:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 472:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef struct
 473:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 474:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 475:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 476:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 477:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 478:smtc_bsp/arm/cmsis/core_cm0plus.h **** } SysTick_Type;
 479:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 480:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 481:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 482:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 483:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 484:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 485:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 486:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 487:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 488:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 489:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 490:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 491:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 492:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 493:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 494:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 495:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 496:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 497:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SysTick Current Register Definitions */
 498:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 499:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 500:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 501:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 502:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 503:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 504:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 505:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 506:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 507:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 508:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 509:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 510:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 511:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 512:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 513:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 514:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 515:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_core_register
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 13


 516:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 517:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
 518:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 519:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 520:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 521:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 522:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
 523:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 524:smtc_bsp/arm/cmsis/core_cm0plus.h **** typedef struct
 525:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 526:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
 527:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
 528:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
 529:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 530:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 531:smtc_bsp/arm/cmsis/core_cm0plus.h **** } MPU_Type;
 532:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 533:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_RALIASES                  1U
 534:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 535:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* MPU Type Register Definitions */
 536:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
 537:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 538:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 539:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
 540:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 541:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 542:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
 543:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 544:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 545:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* MPU Control Register Definitions */
 546:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
 547:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 548:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 549:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
 550:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 551:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 552:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
 553:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 554:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 555:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* MPU Region Number Register Definitions */
 556:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
 557:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 558:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 559:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* MPU Region Base Address Register Definitions */
 560:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU 
 561:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 562:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 563:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
 564:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 565:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 566:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
 567:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 568:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 569:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* MPU Region Attribute and Size Register Definitions */
 570:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
 571:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 572:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 14


 573:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
 574:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 575:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 576:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
 577:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 578:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 579:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
 580:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 581:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 582:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
 583:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 584:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 585:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
 586:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 587:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 588:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
 589:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 590:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 591:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
 592:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 593:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 594:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
 595:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 596:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 597:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
 598:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 599:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 600:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 601:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 602:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 603:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 604:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 605:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_core_register
 606:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 607:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible ov
 608:smtc_bsp/arm/cmsis/core_cm0plus.h ****             Therefore they are not covered by the Cortex-M0+ header file.
 609:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 610:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 611:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 612:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 613:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 614:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 615:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 616:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
 617:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
 618:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 619:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 620:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 621:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 622:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
 623:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 624:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
 625:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return           Masked and shifted value.
 626:smtc_bsp/arm/cmsis/core_cm0plus.h **** */
 627:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
 628:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 629:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 15


 630:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief     Mask and shift a register value to extract a bit filed value.
 631:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param[in] field  Name of the register bit field.
 632:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
 633:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return           Masked and shifted bit field value.
 634:smtc_bsp/arm/cmsis/core_cm0plus.h **** */
 635:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
 636:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 637:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of group CMSIS_core_bitfield */
 638:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 639:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 640:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 641:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup    CMSIS_core_register
 642:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup   CMSIS_core_base     Core Definitions
 643:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief      Definitions for base addresses, unions, and structures.
 644:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 645:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 646:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 647:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* Memory mapping of Core Hardware */
 648:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 649:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
 650:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
 651:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 652:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 653:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 654:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 655:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 656:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 657:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
 658:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
 659:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
 660:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 661:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 662:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} */
 663:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 664:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 665:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 666:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*******************************************************************************
 667:smtc_bsp/arm/cmsis/core_cm0plus.h ****  *                Hardware Abstraction Layer
 668:smtc_bsp/arm/cmsis/core_cm0plus.h ****   Core Function Interface contains:
 669:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core NVIC Functions
 670:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core SysTick Functions
 671:smtc_bsp/arm/cmsis/core_cm0plus.h ****   - Core Register Access Functions
 672:smtc_bsp/arm/cmsis/core_cm0plus.h ****  ******************************************************************************/
 673:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 674:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 675:smtc_bsp/arm/cmsis/core_cm0plus.h **** */
 676:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 677:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 678:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 679:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 680:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 681:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
 682:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 683:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
 684:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
 685:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 686:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 16


 687:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifdef CMSIS_NVIC_VIRTUAL
 688:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
 689:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
 690:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 691:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
 692:smtc_bsp/arm/cmsis/core_cm0plus.h **** #else
 693:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
 694:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
 695:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
 696:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
 697:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
 698:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
 699:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
 700:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
 701:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0+ */
 702:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
 703:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
 704:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
 705:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif /* CMSIS_NVIC_VIRTUAL */
 706:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 707:smtc_bsp/arm/cmsis/core_cm0plus.h **** #ifdef CMSIS_VECTAB_VIRTUAL
 708:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 709:smtc_bsp/arm/cmsis/core_cm0plus.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
 710:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #endif
 711:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 712:smtc_bsp/arm/cmsis/core_cm0plus.h **** #else
 713:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_SetVector              __NVIC_SetVector
 714:smtc_bsp/arm/cmsis/core_cm0plus.h ****   #define NVIC_GetVector              __NVIC_GetVector
 715:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
 716:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 717:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define NVIC_USER_IRQ_OFFSET          16
 718:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 719:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 720:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
 721:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
 722:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
 723:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
 724:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 725:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 726:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under Armv6-M                  */
 727:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 728:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 729:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 730:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 731:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 732:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __NVIC_SetPriorityGrouping(X) (void)(X)
 733:smtc_bsp/arm/cmsis/core_cm0plus.h **** #define __NVIC_GetPriorityGrouping()  (0U)
 734:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 735:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 736:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Enable Interrupt
 737:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
 738:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 739:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    IRQn must not be negative.
 740:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 741:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
 742:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 743:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 17


 744:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 745:smtc_bsp/arm/cmsis/core_cm0plus.h ****     NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 746:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 747:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 748:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 749:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 750:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 751:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Get Interrupt Enable status
 752:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
 753:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 754:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return             0  Interrupt is not enabled.
 755:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return             1  Interrupt is enabled.
 756:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    IRQn must not be negative.
 757:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 758:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
 759:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 760:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 761:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 762:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
 763:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 764:smtc_bsp/arm/cmsis/core_cm0plus.h ****   else
 765:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 766:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return(0U);
 767:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 768:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 769:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 770:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 771:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 772:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Disable Interrupt
 773:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
 774:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 775:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    IRQn must not be negative.
 776:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 777:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
 778:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 779:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 780:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 781:smtc_bsp/arm/cmsis/core_cm0plus.h ****     NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 782:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __DSB();
 783:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __ISB();
 784:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 785:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 786:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 787:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 788:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 789:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Get Pending Interrupt
 790:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
 791:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 792:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return             0  Interrupt status is not pending.
 793:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return             1  Interrupt status is pending.
 794:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    IRQn must not be negative.
 795:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 796:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
 797:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 798:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 799:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 800:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL)
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 18


 801:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 802:smtc_bsp/arm/cmsis/core_cm0plus.h ****   else
 803:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 804:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return(0U);
 805:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 806:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 807:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 808:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 809:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 810:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Set Pending Interrupt
 811:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
 812:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 813:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    IRQn must not be negative.
 814:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 815:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
 816:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 817:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 818:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 819:smtc_bsp/arm/cmsis/core_cm0plus.h ****     NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 820:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 821:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 822:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 823:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 824:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 825:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Clear Pending Interrupt
 826:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
 827:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Device specific interrupt number.
 828:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    IRQn must not be negative.
 829:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 830:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 831:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 832:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 833:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****     NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 835:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 836:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 837:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 838:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 839:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 840:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Set Interrupt Priority
 841:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
 842:smtc_bsp/arm/cmsis/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 843:smtc_bsp/arm/cmsis/core_cm0plus.h ****            or negative to specify a processor exception.
 844:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]      IRQn  Interrupt number.
 845:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]  priority  Priority to set.
 846:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    The priority cannot be set for every processor exception.
 847:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 848:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
  35              		.loc 2 848 22 view .LVU3
  36              	.LBB23:
 849:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 850:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
  37              		.loc 2 850 3 view .LVU4
  38              	.LBE23:
  39              	.LBE22:
 133:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
  40              		.loc 1 133 1 is_stmt 0 view .LVU5
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 19


  41 0000 30B5     		push	{r4, r5, lr}
  42              		.cfi_def_cfa_offset 12
  43              		.cfi_offset 4, -12
  44              		.cfi_offset 5, -8
  45              		.cfi_offset 14, -4
  46 0002 FF25     		movs	r5, #255
  47 0004 0324     		movs	r4, #3
  48 0006 2A00     		movs	r2, r5
  49              	.LVL1:
 133:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
  50              		.loc 1 133 1 view .LVU6
  51 0008 0440     		ands	r4, r0
  52 000a E400     		lsls	r4, r4, #3
  53 000c A240     		lsls	r2, r2, r4
  54 000e 8901     		lsls	r1, r1, #6
  55              	.LVL2:
 133:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
  56              		.loc 1 133 1 view .LVU7
  57 0010 2940     		ands	r1, r5
  58 0012 D243     		mvns	r2, r2
  59 0014 A140     		lsls	r1, r1, r4
  60 0016 C3B2     		uxtb	r3, r0
  61              	.LBB28:
  62              	.LBB26:
  63              		.loc 2 850 6 view .LVU8
  64 0018 0028     		cmp	r0, #0
  65 001a 0ADB     		blt	.L2
 851:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 852:smtc_bsp/arm/cmsis/core_cm0plus.h ****     NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))
  66              		.loc 2 852 5 is_stmt 1 view .LVU9
  67              		.loc 2 852 52 is_stmt 0 view .LVU10
  68 001c C024     		movs	r4, #192
  69 001e 0B4B     		ldr	r3, .L4
  70              		.loc 2 852 53 view .LVU11
  71 0020 8008     		lsrs	r0, r0, #2
  72              	.LVL3:
  73              		.loc 2 852 53 view .LVU12
  74 0022 8000     		lsls	r0, r0, #2
  75 0024 C018     		adds	r0, r0, r3
  76              		.loc 2 852 52 view .LVU13
  77 0026 A400     		lsls	r4, r4, #2
  78 0028 0359     		ldr	r3, [r0, r4]
  79              		.loc 2 852 33 view .LVU14
  80 002a 1A40     		ands	r2, r3
  81              		.loc 2 852 102 view .LVU15
  82 002c 1143     		orrs	r1, r2
  83              		.loc 2 852 30 view .LVU16
  84 002e 0151     		str	r1, [r0, r4]
  85              	.LVL4:
  86              	.L1:
  87              		.loc 2 852 30 view .LVU17
  88              	.LBE26:
  89              	.LBE28:
 137:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
  90              		.loc 1 137 1 view .LVU18
  91              		@ sp needed
  92 0030 30BD     		pop	{r4, r5, pc}
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 20


  93              	.LVL5:
  94              	.L2:
  95              	.LBB29:
  96              	.LBB27:
  97              	.LBB24:
  98              	.LBI24:
 848:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
  99              		.loc 2 848 22 is_stmt 1 view .LVU19
 100              	.LBB25:
 853:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 854:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 855:smtc_bsp/arm/cmsis/core_cm0plus.h ****   else
 856:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****     SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))
 101              		.loc 2 857 5 view .LVU20
 102              		.loc 2 857 53 is_stmt 0 view .LVU21
 103 0032 0F20     		movs	r0, #15
 104              	.LVL6:
 105              		.loc 2 857 53 view .LVU22
 106 0034 0340     		ands	r3, r0
 107              	.LVL7:
 108              		.loc 2 857 53 view .LVU23
 109 0036 083B     		subs	r3, r3, #8
 110 0038 0548     		ldr	r0, .L4+4
 111 003a 9B08     		lsrs	r3, r3, #2
 112 003c 9B00     		lsls	r3, r3, #2
 113 003e 1B18     		adds	r3, r3, r0
 114              		.loc 2 857 52 view .LVU24
 115 0040 D869     		ldr	r0, [r3, #28]
 116              		.loc 2 857 33 view .LVU25
 117 0042 0240     		ands	r2, r0
 118              		.loc 2 857 102 view .LVU26
 119 0044 1143     		orrs	r1, r2
 120              		.loc 2 857 30 view .LVU27
 121 0046 D961     		str	r1, [r3, #28]
 122              	.LVL8:
 123              		.loc 2 857 30 view .LVU28
 124              	.LBE25:
 125              	.LBE24:
 126              	.LBE27:
 127              	.LBE29:
 128              		.loc 1 137 1 view .LVU29
 129 0048 F2E7     		b	.L1
 130              	.L5:
 131 004a C046     		.align	2
 132              	.L4:
 133 004c 00E100E0 		.word	-536813312
 134 0050 00ED00E0 		.word	-536810240
 135              		.cfi_endproc
 136              	.LFE47:
 138              		.section	.text.HAL_NVIC_EnableIRQ,"ax",%progbits
 139              		.align	1
 140              		.global	HAL_NVIC_EnableIRQ
 141              		.syntax unified
 142              		.code	16
 143              		.thumb_func
 144              		.fpu softvfp
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 21


 146              	HAL_NVIC_EnableIRQ:
 147              	.LVL9:
 148              	.LFB48:
 138:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 139:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 140:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Enable a device specific interrupt in the NVIC interrupt controller.
 141:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
 142:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         function should be called before. 
 143:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 144:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of  IRQn_Type enumeration
 145:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 146:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 147:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 148:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
 149:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 149              		.loc 1 149 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 150:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 151:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 154              		.loc 1 151 3 view .LVU31
 152:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   
 153:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Enable interrupt */
 154:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_EnableIRQ(IRQn);
 155              		.loc 1 154 3 view .LVU32
 156              	.LBB32:
 157              	.LBI32:
 741:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 158              		.loc 2 741 22 view .LVU33
 159              	.LBB33:
 743:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 160              		.loc 2 743 3 view .LVU34
 743:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 161              		.loc 2 743 6 is_stmt 0 view .LVU35
 162 0000 0028     		cmp	r0, #0
 163 0002 05DB     		blt	.L6
 745:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 164              		.loc 2 745 5 is_stmt 1 view .LVU36
 745:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 165              		.loc 2 745 58 is_stmt 0 view .LVU37
 166 0004 1F23     		movs	r3, #31
 167 0006 1840     		ands	r0, r3
 168              	.LVL10:
 745:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 169              		.loc 2 745 22 view .LVU38
 170 0008 1E3B     		subs	r3, r3, #30
 171 000a 8340     		lsls	r3, r3, r0
 745:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 172              		.loc 2 745 20 view .LVU39
 173 000c 014A     		ldr	r2, .L8
 174 000e 1360     		str	r3, [r2]
 175              	.LVL11:
 176              	.L6:
 745:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 177              		.loc 2 745 20 view .LVU40
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 22


 178              	.LBE33:
 179              	.LBE32:
 155:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 180              		.loc 1 155 1 view .LVU41
 181              		@ sp needed
 182 0010 7047     		bx	lr
 183              	.L9:
 184 0012 C046     		.align	2
 185              	.L8:
 186 0014 00E100E0 		.word	-536813312
 187              		.cfi_endproc
 188              	.LFE48:
 190              		.section	.text.HAL_NVIC_DisableIRQ,"ax",%progbits
 191              		.align	1
 192              		.global	HAL_NVIC_DisableIRQ
 193              		.syntax unified
 194              		.code	16
 195              		.thumb_func
 196              		.fpu softvfp
 198              	HAL_NVIC_DisableIRQ:
 199              	.LVL12:
 200              	.LFB49:
 156:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 157:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 158:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Disable a device specific interrupt in the NVIC interrupt controller.
 159:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 160:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 161:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 162:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 163:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 164:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
 165:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 201              		.loc 1 165 1 is_stmt 1 view -0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 166:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 167:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 206              		.loc 1 167 3 view .LVU43
 168:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   
 169:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Disable interrupt */
 170:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_DisableIRQ(IRQn);
 207              		.loc 1 170 3 view .LVU44
 208              	.LBB40:
 209              	.LBI40:
 777:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 210              		.loc 2 777 22 view .LVU45
 211              	.LBB41:
 779:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 212              		.loc 2 779 3 view .LVU46
 779:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 213              		.loc 2 779 6 is_stmt 0 view .LVU47
 214 0000 0028     		cmp	r0, #0
 215 0002 09DB     		blt	.L10
 781:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __DSB();
 216              		.loc 2 781 5 is_stmt 1 view .LVU48
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 23


 781:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __DSB();
 217              		.loc 2 781 58 is_stmt 0 view .LVU49
 218 0004 1F23     		movs	r3, #31
 219 0006 1840     		ands	r0, r3
 220              	.LVL13:
 781:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __DSB();
 221              		.loc 2 781 22 view .LVU50
 222 0008 1E3B     		subs	r3, r3, #30
 223 000a 8340     		lsls	r3, r3, r0
 781:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __DSB();
 224              		.loc 2 781 20 view .LVU51
 225 000c 034A     		ldr	r2, .L12
 226 000e D367     		str	r3, [r2, #124]
 782:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __ISB();
 227              		.loc 2 782 5 is_stmt 1 view .LVU52
 228              	.LBB42:
 229              	.LBI42:
 230              		.file 3 "smtc_bsp/arm/cmsis/cmsis_gcc.h"
   1:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**************************************************************************//**
   2:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * @version  V5.0.4
   5:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * @date     09. April 2018
   6:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  ******************************************************************************/
   7:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /*
   8:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  *
  10:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  *
  12:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  *
  16:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  *
  18:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * limitations under the License.
  23:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
  24:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
  25:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
  28:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
  34:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef __has_builtin
  36:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  38:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
  39:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /* CMSIS compiler specific defines */
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 24


  40:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __ASM
  41:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  43:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __INLINE
  44:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __INLINE                               inline
  45:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  46:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  49:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif                                           
  52:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  55:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __USED
  56:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  58:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __WEAK
  59:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  61:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __PACKED
  62:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  64:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  67:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  70:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  78:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  86:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
  94:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 25


  97:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 102:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 110:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 113:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 116:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 117:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 118:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:smtc_bsp/arm/cmsis/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   @{
 122:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 123:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 124:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 125:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 129:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 131:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 133:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 134:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 135:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 136:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 140:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 142:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 144:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 145:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 146:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 147:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Control Register
 148:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Control Register value
 150:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 151:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 153:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 26


 154:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 155:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 157:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 158:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 159:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 160:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 162:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 166:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 168:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 169:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 170:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 172:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 173:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 174:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 175:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 176:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 177:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Control Register
 178:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 181:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 183:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 185:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 186:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 187:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 189:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 193:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 195:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 197:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 198:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 199:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 200:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 201:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               IPSR Register value
 204:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 205:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 207:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 208:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 209:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 27


 211:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 212:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 213:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 214:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 215:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get APSR Register
 216:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               APSR Register value
 218:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 219:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 221:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 222:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 223:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 225:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 226:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 227:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 228:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 229:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               xPSR Register value
 232:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 233:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 235:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 236:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 237:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 239:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 240:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 241:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 242:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 243:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 246:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 247:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 249:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 250:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 251:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 253:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 254:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 255:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 256:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 258:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               PSP Register value
 261:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 262:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 264:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 265:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 266:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 28


 268:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 269:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 270:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 271:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 272:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 273:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 277:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 279:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 281:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 282:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 283:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 285:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 289:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 291:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 293:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 294:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 295:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 296:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 297:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 300:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 301:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 303:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 304:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 305:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 307:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 308:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 309:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 310:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 312:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               MSP Register value
 315:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 316:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 318:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 319:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 320:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 322:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 323:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 324:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 29


 325:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 326:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 327:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 331:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 333:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 335:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 336:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 337:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 339:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 343:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 345:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 347:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 348:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 349:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 350:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 352:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               SP Register value
 355:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 356:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 358:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 359:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 360:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 362:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 363:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 364:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 365:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 366:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 370:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 372:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 374:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 375:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 376:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 377:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 378:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 381:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 30


 382:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 384:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 385:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 386:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 388:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 389:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 390:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 391:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 393:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Priority Mask value
 396:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 397:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 399:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 400:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 401:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 403:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 404:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 405:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 406:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 407:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 408:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 412:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 414:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 416:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 417:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 418:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 420:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 424:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 426:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 428:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 429:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 430:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 431:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:smtc_bsp/arm/cmsis/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:smtc_bsp/arm/cmsis/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 435:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Enable FIQ
 436:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 31


 439:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 441:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 443:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 444:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 445:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 446:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Disable FIQ
 447:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 450:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 452:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 454:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 455:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 456:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 457:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority
 458:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 460:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 461:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 463:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 464:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 465:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 467:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 468:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 469:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 470:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 472:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Base Priority register value
 475:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 476:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 478:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 479:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 480:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 482:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 483:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 484:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 485:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 486:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 487:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority
 488:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 491:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 493:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 495:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 32


 496:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 497:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 499:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 503:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 505:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 507:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 508:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 509:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 510:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 511:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 516:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 518:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 520:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 521:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 522:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 523:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 526:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 527:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 529:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 530:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 531:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 533:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 534:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 535:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 536:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 538:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Fault Mask register value
 541:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 542:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 544:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 545:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 546:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 548:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 549:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 550:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 551:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 552:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 33


 553:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 557:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 559:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 561:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 562:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 563:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 565:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 569:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 571:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 573:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 574:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 575:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 579:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 580:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:smtc_bsp/arm/cmsis/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 583:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 584:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   mode.
 588:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   
 589:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 592:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 594:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:smtc_bsp/arm/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:smtc_bsp/arm/cmsis/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return 0U;
 598:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 599:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 600:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return result;
 602:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 603:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 604:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 605:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 607:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 34


 610:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 611:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 614:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 616:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return 0U;
 619:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 620:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 621:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return result;
 623:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 624:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 625:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 626:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 627:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 628:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 629:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   mode.
 633:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   
 634:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 637:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 639:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:smtc_bsp/arm/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 644:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 646:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 647:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 648:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 649:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 651:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 655:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 658:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 660:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 664:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 666:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 35


 667:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 668:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 669:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 670:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 671:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   mode.
 675:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 676:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 679:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 681:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:smtc_bsp/arm/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return 0U;
 685:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 686:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 687:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return result;
 689:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 690:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 691:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 692:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 693:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 695:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 699:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 702:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 704:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return 0U;
 707:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 708:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 709:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return result;
 711:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 712:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 713:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 714:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 715:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 716:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 717:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   mode.
 721:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 722:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 36


 724:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 725:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 727:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:smtc_bsp/arm/cmsis/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 732:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 734:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 735:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 736:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 737:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 739:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 743:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 746:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 748:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 752:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 754:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 755:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 756:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 757:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 760:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 761:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 762:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Get FPSCR
 763:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 766:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 768:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:smtc_bsp/arm/cmsis/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:smtc_bsp/arm/cmsis/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:smtc_bsp/arm/cmsis/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 776:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   uint32_t result;
 777:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 778:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(result);
 780:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 37


 781:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 782:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   return(0U);
 783:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 784:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 785:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 786:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 787:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 788:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Set FPSCR
 789:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 792:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 794:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:smtc_bsp/arm/cmsis/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:smtc_bsp/arm/cmsis/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:smtc_bsp/arm/cmsis/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 802:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 804:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 805:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   (void)fpscr;
 806:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 807:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 808:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 809:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 810:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 812:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 813:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   Access to dedicated instructions
 816:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   @{
 817:smtc_bsp/arm/cmsis/cmsis_gcc.h **** */
 818:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 819:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #else
 827:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #endif
 831:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 832:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 833:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   No Operation
 834:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 836:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 38


 838:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 839:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 842:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 844:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 845:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 846:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Wait For Event
 847:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 850:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 852:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 853:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 854:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Send Event
 855:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 857:smtc_bsp/arm/cmsis/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 859:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 860:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 861:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            after the instruction has been completed.
 865:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 866:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 868:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 870:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 871:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 872:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 873:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 877:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 231              		.loc 3 877 27 view .LVU53
 232              	.LBB43:
 878:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 879:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 233              		.loc 3 879 3 view .LVU54
 234              		.syntax divided
 235              	@ 879 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 236 0010 BFF34F8F 		dsb 0xF
 237              	@ 0 "" 2
 238              		.thumb
 239              		.syntax unified
 240              	.LBE43:
 241              	.LBE42:
 783:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 242              		.loc 2 783 5 view .LVU55
 243              	.LBB44:
 244              	.LBI44:
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 39


 866:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 245              		.loc 3 866 27 view .LVU56
 246              	.LBB45:
 868:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 247              		.loc 3 868 3 view .LVU57
 248              		.syntax divided
 249              	@ 868 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 250 0014 BFF36F8F 		isb 0xF
 251              	@ 0 "" 2
 252              	.LVL14:
 253              		.thumb
 254              		.syntax unified
 255              	.L10:
 868:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 256              		.loc 3 868 3 is_stmt 0 view .LVU58
 257              	.LBE45:
 258              	.LBE44:
 259              	.LBE41:
 260              	.LBE40:
 171:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 261              		.loc 1 171 1 view .LVU59
 262              		@ sp needed
 263 0018 7047     		bx	lr
 264              	.L13:
 265 001a C046     		.align	2
 266              	.L12:
 267 001c 04E100E0 		.word	-536813308
 268              		.cfi_endproc
 269              	.LFE49:
 271              		.section	.text.HAL_NVIC_SystemReset,"ax",%progbits
 272              		.align	1
 273              		.global	HAL_NVIC_SystemReset
 274              		.syntax unified
 275              		.code	16
 276              		.thumb_func
 277              		.fpu softvfp
 279              	HAL_NVIC_SystemReset:
 280              	.LFB50:
 172:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 173:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 174:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Initiate a system reset request to reset the MCU.
 175:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 176:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 177:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SystemReset(void)
 178:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 281              		.loc 1 178 1 is_stmt 1 view -0
 282              		.cfi_startproc
 283              		@ Volatile: function does not return.
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 179:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* System Reset */
 180:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_SystemReset();
 287              		.loc 1 180 3 view .LVU61
 288              	.LBB52:
 289              	.LBI52:
 858:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 40


 859:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 860:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 861:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 862:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 863:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 864:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Get Interrupt Priority
 865:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
 866:smtc_bsp/arm/cmsis/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 867:smtc_bsp/arm/cmsis/core_cm0plus.h ****            or negative to specify a processor exception.
 868:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]   IRQn  Interrupt number.
 869:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return             Interrupt Priority.
 870:smtc_bsp/arm/cmsis/core_cm0plus.h ****                       Value is aligned automatically to the implemented priority bits of the microc
 871:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 872:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
 873:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 874:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 875:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((int32_t)(IRQn) >= 0)
 876:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 877:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 878:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 879:smtc_bsp/arm/cmsis/core_cm0plus.h ****   else
 880:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U -
 882:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 883:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 884:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 885:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 886:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 887:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Encode Priority
 888:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Encodes the priority for an interrupt with the given priority group,
 889:smtc_bsp/arm/cmsis/core_cm0plus.h ****            preemptive priority value, and subpriority value.
 890:smtc_bsp/arm/cmsis/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 891:smtc_bsp/arm/cmsis/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
 892:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 893:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
 894:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
 895:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
 896:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 897:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 898:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 899:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 900:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 901:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t SubPriorityBits;
 902:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 903:smtc_bsp/arm/cmsis/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 904:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 905:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 906:smtc_bsp/arm/cmsis/core_cm0plus.h ****   return (
 907:smtc_bsp/arm/cmsis/core_cm0plus.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 908:smtc_bsp/arm/cmsis/core_cm0plus.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 909:smtc_bsp/arm/cmsis/core_cm0plus.h ****          );
 910:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 911:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 912:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 913:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 914:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Decode Priority
 915:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Decodes an interrupt priority value with a given priority group to
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 41


 916:smtc_bsp/arm/cmsis/core_cm0plus.h ****            preemptive priority value and subpriority value.
 917:smtc_bsp/arm/cmsis/core_cm0plus.h ****            In case of a conflict between priority grouping and available
 918:smtc_bsp/arm/cmsis/core_cm0plus.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
 919:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
 920:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]     PriorityGroup  Used priority group.
 921:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
 922:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
 923:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 924:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
 925:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 926:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 927:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t PreemptPriorityBits;
 928:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t SubPriorityBits;
 929:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 930:smtc_bsp/arm/cmsis/core_cm0plus.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 931:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 932:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 933:smtc_bsp/arm/cmsis/core_cm0plus.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
 934:smtc_bsp/arm/cmsis/core_cm0plus.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
 935:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 936:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 937:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 938:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 939:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Set Interrupt Vector
 940:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
 941:smtc_bsp/arm/cmsis/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 942:smtc_bsp/arm/cmsis/core_cm0plus.h ****            or negative to specify a processor exception.
 943:smtc_bsp/arm/cmsis/core_cm0plus.h ****            VTOR must been relocated to SRAM before.
 944:smtc_bsp/arm/cmsis/core_cm0plus.h ****            If VTOR is not present address 0 must be mapped to SRAM.
 945:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number
 946:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]   vector    Address of interrupt handler function
 947:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 948:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
 949:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 950:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 951:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 952:smtc_bsp/arm/cmsis/core_cm0plus.h **** #else
 953:smtc_bsp/arm/cmsis/core_cm0plus.h ****     uint32_t *vectors = (uint32_t *)0x0U;
 954:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 955:smtc_bsp/arm/cmsis/core_cm0plus.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
 956:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 957:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 958:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 959:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 960:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   Get Interrupt Vector
 961:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Reads an interrupt vector from interrupt vector table.
 962:smtc_bsp/arm/cmsis/core_cm0plus.h ****            The interrupt number can be positive to specify a device specific interrupt,
 963:smtc_bsp/arm/cmsis/core_cm0plus.h ****            or negative to specify a processor exception.
 964:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]   IRQn      Interrupt number.
 965:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return                 Address of interrupt handler function
 966:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 967:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
 968:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 969:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
 970:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
 971:smtc_bsp/arm/cmsis/core_cm0plus.h **** #else
 972:smtc_bsp/arm/cmsis/core_cm0plus.h ****   uint32_t *vectors = (uint32_t *)0x0U;
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 42


 973:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
 974:smtc_bsp/arm/cmsis/core_cm0plus.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
 975:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 976:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 977:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 978:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 979:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
 980:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   System Reset
 981:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Initiates a system reset request to reset the MCU.
 982:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
 983:smtc_bsp/arm/cmsis/core_cm0plus.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
 290              		.loc 2 983 34 view .LVU62
 291              	.LBB53:
 984:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 985:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __DSB();                                                          /* Ensure all outstanding memor
 292              		.loc 2 985 3 view .LVU63
 293              	.LBB54:
 294              	.LBI54:
 877:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 295              		.loc 3 877 27 view .LVU64
 296              	.LBB55:
 297              		.loc 3 879 3 view .LVU65
 298              		.syntax divided
 299              	@ 879 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 300 0000 BFF34F8F 		dsb 0xF
 301              	@ 0 "" 2
 302              		.thumb
 303              		.syntax unified
 304              	.LBE55:
 305              	.LBE54:
 986:smtc_bsp/arm/cmsis/core_cm0plus.h ****                                                                        buffered write are completed
 987:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 306              		.loc 2 987 3 view .LVU66
 307              		.loc 2 987 15 is_stmt 0 view .LVU67
 308 0004 034B     		ldr	r3, .L16
 309 0006 044A     		ldr	r2, .L16+4
 310 0008 DA60     		str	r2, [r3, #12]
 988:smtc_bsp/arm/cmsis/core_cm0plus.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);
 989:smtc_bsp/arm/cmsis/core_cm0plus.h ****   __DSB();                                                          /* Ensure completion of memory 
 311              		.loc 2 989 3 is_stmt 1 view .LVU68
 312              	.LBB56:
 313              	.LBI56:
 877:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 314              		.loc 3 877 27 view .LVU69
 315              	.LBB57:
 316              		.loc 3 879 3 view .LVU70
 317              		.syntax divided
 318              	@ 879 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 319 000a BFF34F8F 		dsb 0xF
 320              	@ 0 "" 2
 321              		.thumb
 322              		.syntax unified
 323              	.L15:
 324              	.LBE57:
 325              	.LBE56:
 990:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 991:smtc_bsp/arm/cmsis/core_cm0plus.h ****   for(;;)                                                           /* wait until reset */
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 43


 326              		.loc 2 991 3 view .LVU71
 992:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 993:smtc_bsp/arm/cmsis/core_cm0plus.h ****     __NOP();
 327              		.loc 2 993 5 view .LVU72
 328              		.syntax divided
 329              	@ 993 "smtc_bsp/arm/cmsis/core_cm0plus.h" 1
 330 000e C046     		nop
 331              	@ 0 "" 2
 991:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 332              		.loc 2 991 8 view .LVU73
 333              		.thumb
 334              		.syntax unified
 335 0010 FDE7     		b	.L15
 336              	.L17:
 337 0012 C046     		.align	2
 338              	.L16:
 339 0014 00ED00E0 		.word	-536810240
 340 0018 0400FA05 		.word	100270084
 341              	.LBE53:
 342              	.LBE52:
 343              		.cfi_endproc
 344              	.LFE50:
 346              		.section	.text.HAL_SYSTICK_Config,"ax",%progbits
 347              		.align	1
 348              		.global	HAL_SYSTICK_Config
 349              		.syntax unified
 350              		.code	16
 351              		.thumb_func
 352              		.fpu softvfp
 354              	HAL_SYSTICK_Config:
 355              	.LVL15:
 356              	.LFB51:
 181:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 182:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 183:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 184:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Initialize the System Timer with interrupt enabled and start the System Tick Timer (Sys
 185:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         Counter is in free running mode to generate periodic interrupts.
 186:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 187:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval status:  - 0  Function succeeded.
 188:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                  - 1  Function failed.
 189:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 190:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
 191:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 357              		.loc 1 191 1 view -0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 192:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    return SysTick_Config(TicksNumb);
 362              		.loc 1 192 4 view .LVU75
 363              	.LBB64:
 364              	.LBI64:
 994:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 995:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
 996:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
 997:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of CMSIS_Core_NVICFunctions */
 998:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 44


 999:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* ##########################  MPU functions  #################################### */
1000:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1001:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1002:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1003:smtc_bsp/arm/cmsis/core_cm0plus.h **** #include "mpu_armv7.h"
1004:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1005:smtc_bsp/arm/cmsis/core_cm0plus.h **** #endif
1006:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1007:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* ##########################  FPU functions  #################################### */
1008:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
1009:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1010:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
1011:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Function that provides FPU type.
1012:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
1013:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
1014:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1015:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
1016:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   get FPU type
1017:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details returns the FPU type
1018:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \returns
1019:smtc_bsp/arm/cmsis/core_cm0plus.h ****    - \b  0: No FPU
1020:smtc_bsp/arm/cmsis/core_cm0plus.h ****    - \b  1: Single precision FPU
1021:smtc_bsp/arm/cmsis/core_cm0plus.h ****    - \b  2: Double + Single precision FPU
1022:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
1023:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
1024:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
1025:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return 0U;           /* No FPU */
1026:smtc_bsp/arm/cmsis/core_cm0plus.h **** }
1027:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1028:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1029:smtc_bsp/arm/cmsis/core_cm0plus.h **** /*@} end of CMSIS_Core_FpuFunctions */
1030:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1031:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1032:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1033:smtc_bsp/arm/cmsis/core_cm0plus.h **** /* ##################################    SysTick function  ########################################
1034:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
1035:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \ingroup  CMSIS_Core_FunctionInterface
1036:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1037:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief    Functions that configure the System.
1038:smtc_bsp/arm/cmsis/core_cm0plus.h ****   @{
1039:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
1040:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1041:smtc_bsp/arm/cmsis/core_cm0plus.h **** #if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
1042:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1043:smtc_bsp/arm/cmsis/core_cm0plus.h **** /**
1044:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \brief   System Tick Configuration
1045:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
1046:smtc_bsp/arm/cmsis/core_cm0plus.h ****            Counter is in free running mode to generate periodic interrupts.
1047:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \param [in]  ticks  Number of ticks between two interrupts.
1048:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return          0  Function succeeded.
1049:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \return          1  Function failed.
1050:smtc_bsp/arm/cmsis/core_cm0plus.h ****   \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1051:smtc_bsp/arm/cmsis/core_cm0plus.h ****            function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.
1052:smtc_bsp/arm/cmsis/core_cm0plus.h ****            must contain a vendor-specific implementation of this function.
1053:smtc_bsp/arm/cmsis/core_cm0plus.h ****  */
1054:smtc_bsp/arm/cmsis/core_cm0plus.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
 365              		.loc 2 1054 26 view .LVU76
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 45


 366              	.LBB65:
1055:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
1056:smtc_bsp/arm/cmsis/core_cm0plus.h ****   if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 367              		.loc 2 1056 3 view .LVU77
 368              		.loc 2 1056 6 is_stmt 0 view .LVU78
 369 0000 8022     		movs	r2, #128
 370              		.loc 2 1056 14 view .LVU79
 371 0002 431E     		subs	r3, r0, #1
 372              		.loc 2 1056 6 view .LVU80
 373 0004 5204     		lsls	r2, r2, #17
1057:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
1058:smtc_bsp/arm/cmsis/core_cm0plus.h ****     return (1UL);                                                   /* Reload value impossible */
 374              		.loc 2 1058 12 view .LVU81
 375 0006 0120     		movs	r0, #1
 376              	.LVL16:
1056:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 377              		.loc 2 1056 6 view .LVU82
 378 0008 9342     		cmp	r3, r2
 379 000a 0DD2     		bcs	.L18
1059:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
1060:smtc_bsp/arm/cmsis/core_cm0plus.h **** 
1061:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 380              		.loc 2 1061 3 is_stmt 1 view .LVU83
 381              	.LBB66:
 382              	.LBB67:
 383              	.LBB68:
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 384              		.loc 2 857 102 is_stmt 0 view .LVU84
 385 000c C021     		movs	r1, #192
 386              	.LBE68:
 387              	.LBE67:
 388              	.LBE66:
 389              		.loc 2 1061 18 view .LVU85
 390 000e 074A     		ldr	r2, .L21
 391              	.LBB73:
 392              	.LBB71:
 393              	.LBB69:
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 394              		.loc 2 857 52 view .LVU86
 395 0010 0748     		ldr	r0, .L21+4
 396              	.LBE69:
 397              	.LBE71:
 398              	.LBE73:
 399              		.loc 2 1061 18 view .LVU87
 400 0012 5360     		str	r3, [r2, #4]
1062:smtc_bsp/arm/cmsis/core_cm0plus.h ****   NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Int
 401              		.loc 2 1062 3 is_stmt 1 view .LVU88
 402              	.LVL17:
 403              	.LBB74:
 404              	.LBI66:
 848:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 405              		.loc 2 848 22 view .LVU89
 406              	.LBE74:
 407              	.LBE65:
 408              	.LBE64:
 850:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 409              		.loc 2 850 3 view .LVU90
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 46


 410              	.LBB77:
 411              	.LBB76:
 412              	.LBB75:
 413              	.LBB72:
 414              	.LBI67:
 848:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 415              		.loc 2 848 22 view .LVU91
 416              	.LBB70:
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 417              		.loc 2 857 5 view .LVU92
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 418              		.loc 2 857 52 is_stmt 0 view .LVU93
 419 0014 036A     		ldr	r3, [r0, #32]
 420              	.LVL18:
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 421              		.loc 2 857 102 view .LVU94
 422 0016 0906     		lsls	r1, r1, #24
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 423              		.loc 2 857 33 view .LVU95
 424 0018 1B02     		lsls	r3, r3, #8
 425 001a 1B0A     		lsrs	r3, r3, #8
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 426              		.loc 2 857 102 view .LVU96
 427 001c 0B43     		orrs	r3, r1
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 428              		.loc 2 857 30 view .LVU97
 429 001e 0362     		str	r3, [r0, #32]
 430              	.LVL19:
 857:smtc_bsp/arm/cmsis/core_cm0plus.h ****        (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 431              		.loc 2 857 30 view .LVU98
 432              	.LBE70:
 433              	.LBE72:
 434              	.LBE75:
1063:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 435              		.loc 2 1063 3 is_stmt 1 view .LVU99
 436              		.loc 2 1063 18 is_stmt 0 view .LVU100
 437 0020 0020     		movs	r0, #0
1064:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 438              		.loc 2 1064 18 view .LVU101
 439 0022 0723     		movs	r3, #7
1063:smtc_bsp/arm/cmsis/core_cm0plus.h ****   SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Val
 440              		.loc 2 1063 18 view .LVU102
 441 0024 9060     		str	r0, [r2, #8]
 442              		.loc 2 1064 3 is_stmt 1 view .LVU103
 443              		.loc 2 1064 18 is_stmt 0 view .LVU104
 444 0026 1360     		str	r3, [r2]
1065:smtc_bsp/arm/cmsis/core_cm0plus.h ****                    SysTick_CTRL_TICKINT_Msk   |
1066:smtc_bsp/arm/cmsis/core_cm0plus.h ****                    SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTi
1067:smtc_bsp/arm/cmsis/core_cm0plus.h ****   return (0UL);                                                     /* Function successful */
 445              		.loc 2 1067 3 is_stmt 1 view .LVU105
 446              	.L18:
 447              	.LBE76:
 448              	.LBE77:
 193:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 449              		.loc 1 193 1 is_stmt 0 view .LVU106
 450              		@ sp needed
 451 0028 7047     		bx	lr
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 47


 452              	.L22:
 453 002a C046     		.align	2
 454              	.L21:
 455 002c 10E000E0 		.word	-536813552
 456 0030 00ED00E0 		.word	-536810240
 457              		.cfi_endproc
 458              	.LFE51:
 460              		.section	.text.HAL_NVIC_GetPriority,"ax",%progbits
 461              		.align	1
 462              		.global	HAL_NVIC_GetPriority
 463              		.syntax unified
 464              		.code	16
 465              		.thumb_func
 466              		.fpu softvfp
 468              	HAL_NVIC_GetPriority:
 469              	.LVL20:
 470              	.LFB52:
 194:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 195:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @}
 196:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 197:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 198:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /** @addtogroup CORTEX_Exported_Functions_Group2 Peripheral Control functions 
 199:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *  @brief   Cortex control functions 
 200:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  *
 201:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @verbatim   
 202:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================
 203:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                       ##### Peripheral Control functions #####
 204:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   ==============================================================================  
 205:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     [..]
 206:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       This subsection provides a set of functions allowing to control the CORTEX
 207:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       (NVIC, SYSTICK) functionalities. 
 208:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****  
 209:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****       
 210:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** @endverbatim
 211:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @{
 212:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 213:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 214:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 215:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 216:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Gets the priority of an interrupt.
 217:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number.
 218:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 219:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSI
 220:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 221:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 222:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
 223:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 471              		.loc 1 223 1 is_stmt 1 view -0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 224:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Get priority for Cortex-M system or device specific interrupts */
 225:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   return NVIC_GetPriority(IRQn);
 476              		.loc 1 225 3 view .LVU108
 477              	.LBB80:
 478              	.LBI80:
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 48


 872:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 479              		.loc 2 872 26 view .LVU109
 480              	.LBB81:
 875:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 481              		.loc 2 875 3 view .LVU110
 482 0000 0322     		movs	r2, #3
 483 0002 0100     		movs	r1, r0
 484 0004 1140     		ands	r1, r2
 485 0006 9140     		lsls	r1, r1, r2
 486 0008 C3B2     		uxtb	r3, r0
 875:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 487              		.loc 2 875 6 is_stmt 0 view .LVU111
 488 000a 0028     		cmp	r0, #0
 489 000c 09DB     		blt	.L24
 877:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 490              		.loc 2 877 5 is_stmt 1 view .LVU112
 877:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 491              		.loc 2 877 35 is_stmt 0 view .LVU113
 492 000e 8008     		lsrs	r0, r0, #2
 493              	.LVL21:
 877:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 494              		.loc 2 877 33 view .LVU114
 495 0010 0300     		movs	r3, r0
 496              	.LVL22:
 877:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 497              		.loc 2 877 33 view .LVU115
 498 0012 0848     		ldr	r0, .L27
 499 0014 C033     		adds	r3, r3, #192
 500 0016 9B00     		lsls	r3, r3, #2
 501 0018 1858     		ldr	r0, [r3, r0]
 502              	.L26:
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 503              		.loc 2 881 50 view .LVU116
 504 001a C840     		lsrs	r0, r0, r1
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 505              		.loc 2 881 12 view .LVU117
 506 001c 8009     		lsrs	r0, r0, #6
 507 001e 1040     		ands	r0, r2
 508              	.LVL23:
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 509              		.loc 2 881 12 view .LVU118
 510              	.LBE81:
 511              	.LBE80:
 226:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 512              		.loc 1 226 1 view .LVU119
 513              		@ sp needed
 514 0020 7047     		bx	lr
 515              	.LVL24:
 516              	.L24:
 517              	.LBB83:
 518              	.LBB82:
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 519              		.loc 2 881 5 is_stmt 1 view .LVU120
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 520              		.loc 2 881 34 is_stmt 0 view .LVU121
 521 0022 0F20     		movs	r0, #15
 522              	.LVL25:
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 49


 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 523              		.loc 2 881 34 view .LVU122
 524 0024 0340     		ands	r3, r0
 525              	.LVL26:
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 526              		.loc 2 881 34 view .LVU123
 527 0026 083B     		subs	r3, r3, #8
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 528              		.loc 2 881 33 view .LVU124
 529 0028 0348     		ldr	r0, .L27+4
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 530              		.loc 2 881 34 view .LVU125
 531 002a 9B08     		lsrs	r3, r3, #2
 881:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 532              		.loc 2 881 33 view .LVU126
 533 002c 9B00     		lsls	r3, r3, #2
 534 002e 1B18     		adds	r3, r3, r0
 535 0030 5868     		ldr	r0, [r3, #4]
 536 0032 F2E7     		b	.L26
 537              	.L28:
 538              		.align	2
 539              	.L27:
 540 0034 00E100E0 		.word	-536813312
 541 0038 18ED00E0 		.word	-536810216
 542              	.LBE82:
 543              	.LBE83:
 544              		.cfi_endproc
 545              	.LFE52:
 547              		.section	.text.HAL_NVIC_SetPendingIRQ,"ax",%progbits
 548              		.align	1
 549              		.global	HAL_NVIC_SetPendingIRQ
 550              		.syntax unified
 551              		.code	16
 552              		.thumb_func
 553              		.fpu softvfp
 555              	HAL_NVIC_SetPendingIRQ:
 556              	.LVL27:
 557              	.LFB53:
 227:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 228:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 229:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Sets Pending bit of an external interrupt.
 230:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number
 231:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 232:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 233:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 234:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 235:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
 236:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
 558              		.loc 1 236 1 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 237:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Set interrupt pending */
 238:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_SetPendingIRQ(IRQn);
 563              		.loc 1 238 3 view .LVU128
 564              	.LBB86:
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 50


 565              	.LBI86:
 815:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 566              		.loc 2 815 22 view .LVU129
 567              	.LBB87:
 817:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 568              		.loc 2 817 3 view .LVU130
 817:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 569              		.loc 2 817 6 is_stmt 0 view .LVU131
 570 0000 0028     		cmp	r0, #0
 571 0002 05DB     		blt	.L29
 819:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 572              		.loc 2 819 5 is_stmt 1 view .LVU132
 819:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 573              		.loc 2 819 58 is_stmt 0 view .LVU133
 574 0004 1F23     		movs	r3, #31
 575 0006 1840     		ands	r0, r3
 576              	.LVL28:
 819:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 577              		.loc 2 819 22 view .LVU134
 578 0008 1E3B     		subs	r3, r3, #30
 579 000a 8340     		lsls	r3, r3, r0
 819:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 580              		.loc 2 819 20 view .LVU135
 581 000c 014A     		ldr	r2, .L31
 582 000e 5360     		str	r3, [r2, #4]
 583              	.LVL29:
 584              	.L29:
 819:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 585              		.loc 2 819 20 view .LVU136
 586              	.LBE87:
 587              	.LBE86:
 239:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 588              		.loc 1 239 1 view .LVU137
 589              		@ sp needed
 590 0010 7047     		bx	lr
 591              	.L32:
 592 0012 C046     		.align	2
 593              	.L31:
 594 0014 FCE100E0 		.word	-536813060
 595              		.cfi_endproc
 596              	.LFE53:
 598              		.section	.text.HAL_NVIC_GetPendingIRQ,"ax",%progbits
 599              		.align	1
 600              		.global	HAL_NVIC_GetPendingIRQ
 601              		.syntax unified
 602              		.code	16
 603              		.thumb_func
 604              		.fpu softvfp
 606              	HAL_NVIC_GetPendingIRQ:
 607              	.LVL30:
 608              	.LFB54:
 240:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 241:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 242:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Get Pending Interrupt (read the pending register in the NVIC 
 243:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         and return the pending bit for the specified interrupt).
 244:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 245:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This parameter can be an enumerator of  IRQn_Type enumeration
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 51


 246:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 247:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval status: - 0  Interrupt status is not pending.
 248:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                 - 1  Interrupt status is pending.
 249:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 250:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
 251:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
 609              		.loc 1 251 1 is_stmt 1 view -0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 252:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 253:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   return NVIC_GetPendingIRQ(IRQn);
 614              		.loc 1 253 3 view .LVU139
 251:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Return 1 if pending else 0 */
 615              		.loc 1 251 1 is_stmt 0 view .LVU140
 616 0000 0300     		movs	r3, r0
 617              	.LVL31:
 618              	.LBB90:
 619              	.LBI90:
 796:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 620              		.loc 2 796 26 is_stmt 1 view .LVU141
 621              	.LBB91:
 798:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 622              		.loc 2 798 3 view .LVU142
 804:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 623              		.loc 2 804 11 is_stmt 0 view .LVU143
 624 0002 0020     		movs	r0, #0
 625              	.LVL32:
 798:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 626              		.loc 2 798 6 view .LVU144
 627 0004 8342     		cmp	r3, r0
 628 0006 06DB     		blt	.L33
 800:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 629              		.loc 2 800 5 is_stmt 1 view .LVU145
 800:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 630              		.loc 2 800 35 is_stmt 0 view .LVU146
 631 0008 034A     		ldr	r2, .L36
 632 000a 5068     		ldr	r0, [r2, #4]
 800:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 633              		.loc 2 800 68 view .LVU147
 634 000c 1F22     		movs	r2, #31
 635 000e 1340     		ands	r3, r2
 636              	.LVL33:
 800:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 637              		.loc 2 800 80 view .LVU148
 638 0010 D840     		lsrs	r0, r0, r3
 800:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 639              		.loc 2 800 12 view .LVU149
 640 0012 0123     		movs	r3, #1
 641 0014 1840     		ands	r0, r3
 642              	.L33:
 643              	.LBE91:
 644              	.LBE90:
 254:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 645              		.loc 1 254 1 view .LVU150
 646              		@ sp needed
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 52


 647 0016 7047     		bx	lr
 648              	.L37:
 649              		.align	2
 650              	.L36:
 651 0018 FCE100E0 		.word	-536813060
 652              		.cfi_endproc
 653              	.LFE54:
 655              		.section	.text.HAL_NVIC_ClearPendingIRQ,"ax",%progbits
 656              		.align	1
 657              		.global	HAL_NVIC_ClearPendingIRQ
 658              		.syntax unified
 659              		.code	16
 660              		.thumb_func
 661              		.fpu softvfp
 663              	HAL_NVIC_ClearPendingIRQ:
 664              	.LVL34:
 665              	.LFB55:
 255:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 256:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 257:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Clear the pending bit of an external interrupt.
 258:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  IRQn External interrupt number .
 259:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         This parameter can be an enumerator of IRQn_Type enumeration
 260:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
 261:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 262:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 263:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 264:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** { 
 666              		.loc 1 264 1 is_stmt 1 view -0
 667              		.cfi_startproc
 668              		@ args = 0, pretend = 0, frame = 0
 669              		@ frame_needed = 0, uses_anonymous_args = 0
 670              		@ link register save eliminated.
 265:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Clear pending interrupt */
 266:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   NVIC_ClearPendingIRQ(IRQn);
 671              		.loc 1 266 3 view .LVU152
 672              	.LBB94:
 673              	.LBI94:
 830:smtc_bsp/arm/cmsis/core_cm0plus.h **** {
 674              		.loc 2 830 22 view .LVU153
 675              	.LBB95:
 832:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 676              		.loc 2 832 3 view .LVU154
 832:smtc_bsp/arm/cmsis/core_cm0plus.h ****   {
 677              		.loc 2 832 6 is_stmt 0 view .LVU155
 678 0000 0028     		cmp	r0, #0
 679 0002 07DB     		blt	.L38
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 680              		.loc 2 834 5 is_stmt 1 view .LVU156
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 681              		.loc 2 834 58 is_stmt 0 view .LVU157
 682 0004 1F23     		movs	r3, #31
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 683              		.loc 2 834 20 view .LVU158
 684 0006 C022     		movs	r2, #192
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 685              		.loc 2 834 58 view .LVU159
 686 0008 1840     		ands	r0, r3
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 53


 687              	.LVL35:
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 688              		.loc 2 834 22 view .LVU160
 689 000a 1E3B     		subs	r3, r3, #30
 690 000c 8340     		lsls	r3, r3, r0
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 691              		.loc 2 834 20 view .LVU161
 692 000e 0249     		ldr	r1, .L40
 693 0010 5200     		lsls	r2, r2, #1
 694 0012 8B50     		str	r3, [r1, r2]
 695              	.LVL36:
 696              	.L38:
 834:smtc_bsp/arm/cmsis/core_cm0plus.h ****   }
 697              		.loc 2 834 20 view .LVU162
 698              	.LBE95:
 699              	.LBE94:
 267:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 700              		.loc 1 267 1 view .LVU163
 701              		@ sp needed
 702 0014 7047     		bx	lr
 703              	.L41:
 704 0016 C046     		.align	2
 705              	.L40:
 706 0018 00E100E0 		.word	-536813312
 707              		.cfi_endproc
 708              	.LFE55:
 710              		.section	.text.HAL_SYSTICK_CLKSourceConfig,"ax",%progbits
 711              		.align	1
 712              		.global	HAL_SYSTICK_CLKSourceConfig
 713              		.syntax unified
 714              		.code	16
 715              		.thumb_func
 716              		.fpu softvfp
 718              	HAL_SYSTICK_CLKSourceConfig:
 719              	.LVL37:
 720              	.LFB56:
 268:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 269:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 270:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 271:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Configure the SysTick clock source.
 272:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  CLKSource specifies the SysTick clock source.
 273:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 274:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock 
 275:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
 276:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 277:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 278:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
 279:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 721              		.loc 1 279 1 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 280:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 281:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 726              		.loc 1 281 3 view .LVU165
 282:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 54


 727              		.loc 1 282 3 view .LVU166
 728 0000 054B     		ldr	r3, .L45
 283:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 284:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 729              		.loc 1 284 19 is_stmt 0 view .LVU167
 730 0002 1A68     		ldr	r2, [r3]
 282:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 731              		.loc 1 282 6 view .LVU168
 732 0004 0428     		cmp	r0, #4
 733 0006 02D1     		bne	.L43
 734              		.loc 1 284 5 is_stmt 1 view .LVU169
 735              		.loc 1 284 19 is_stmt 0 view .LVU170
 736 0008 1043     		orrs	r0, r2
 737              	.LVL38:
 738              		.loc 1 284 19 view .LVU171
 739 000a 1860     		str	r0, [r3]
 740              	.L42:
 285:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 286:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   else
 287:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 288:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 289:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 290:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 741              		.loc 1 290 1 view .LVU172
 742              		@ sp needed
 743 000c 7047     		bx	lr
 744              	.LVL39:
 745              	.L43:
 288:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 746              		.loc 1 288 5 is_stmt 1 view .LVU173
 288:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 747              		.loc 1 288 19 is_stmt 0 view .LVU174
 748 000e 0421     		movs	r1, #4
 749 0010 8A43     		bics	r2, r1
 750 0012 1A60     		str	r2, [r3]
 751              		.loc 1 290 1 view .LVU175
 752 0014 FAE7     		b	.L42
 753              	.L46:
 754 0016 C046     		.align	2
 755              	.L45:
 756 0018 10E000E0 		.word	-536813552
 757              		.cfi_endproc
 758              	.LFE56:
 760              		.section	.text.HAL_SYSTICK_Callback,"ax",%progbits
 761              		.align	1
 762              		.weak	HAL_SYSTICK_Callback
 763              		.syntax unified
 764              		.code	16
 765              		.thumb_func
 766              		.fpu softvfp
 768              	HAL_SYSTICK_Callback:
 769              	.LFB58:
 291:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 292:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 293:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Handle SYSTICK interrupt request.
 294:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 295:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 55


 296:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_SYSTICK_IRQHandler(void)
 297:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 298:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 299:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 300:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 301:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 302:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  SYSTICK callback.
 303:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 304:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 305:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** __weak void HAL_SYSTICK_Callback(void)
 306:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 770              		.loc 1 306 1 is_stmt 1 view -0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 0
 773              		@ frame_needed = 0, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 307:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 308:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****             the HAL_SYSTICK_Callback could be implemented in the user file
 309:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    */
 310:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 775              		.loc 1 310 1 view .LVU177
 776              		@ sp needed
 777 0000 7047     		bx	lr
 778              		.cfi_endproc
 779              	.LFE58:
 781              		.section	.text.HAL_SYSTICK_IRQHandler,"ax",%progbits
 782              		.align	1
 783              		.global	HAL_SYSTICK_IRQHandler
 784              		.syntax unified
 785              		.code	16
 786              		.thumb_func
 787              		.fpu softvfp
 789              	HAL_SYSTICK_IRQHandler:
 790              	.LFB57:
 297:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 791              		.loc 1 297 1 view -0
 792              		.cfi_startproc
 793              		@ args = 0, pretend = 0, frame = 0
 794              		@ frame_needed = 0, uses_anonymous_args = 0
 298:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 795              		.loc 1 298 3 view .LVU179
 297:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   HAL_SYSTICK_Callback();
 796              		.loc 1 297 1 is_stmt 0 view .LVU180
 797 0000 10B5     		push	{r4, lr}
 798              		.cfi_def_cfa_offset 8
 799              		.cfi_offset 4, -8
 800              		.cfi_offset 14, -4
 298:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 801              		.loc 1 298 3 view .LVU181
 802 0002 FFF7FEFF 		bl	HAL_SYSTICK_Callback
 803              	.LVL40:
 299:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 804              		.loc 1 299 1 view .LVU182
 805              		@ sp needed
 806 0006 10BD     		pop	{r4, pc}
 807              		.cfi_endproc
 808              	.LFE57:
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 56


 810              		.section	.text.HAL_MPU_Disable,"ax",%progbits
 811              		.align	1
 812              		.global	HAL_MPU_Disable
 813              		.syntax unified
 814              		.code	16
 815              		.thumb_func
 816              		.fpu softvfp
 818              	HAL_MPU_Disable:
 819              	.LFB59:
 311:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 312:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** #if (__MPU_PRESENT == 1U)
 313:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 314:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Disable the MPU.
 315:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 316:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 317:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_MPU_Disable(void)
 318:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 820              		.loc 1 318 1 is_stmt 1 view -0
 821              		.cfi_startproc
 822              		@ args = 0, pretend = 0, frame = 0
 823              		@ frame_needed = 0, uses_anonymous_args = 0
 824              		@ link register save eliminated.
 319:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 320:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /*Data Memory Barrier setup */
 321:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   __DMB();
 825              		.loc 1 321 3 view .LVU184
 826              	.LBB96:
 827              	.LBI96:
 880:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 881:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 882:smtc_bsp/arm/cmsis/cmsis_gcc.h **** 
 883:smtc_bsp/arm/cmsis/cmsis_gcc.h **** /**
 884:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:smtc_bsp/arm/cmsis/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:smtc_bsp/arm/cmsis/cmsis_gcc.h ****  */
 888:smtc_bsp/arm/cmsis/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 828              		.loc 3 888 27 view .LVU185
 829              	.LBB97:
 889:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 890:smtc_bsp/arm/cmsis/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 830              		.loc 3 890 3 view .LVU186
 831              		.syntax divided
 832              	@ 890 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 833 0000 BFF35F8F 		dmb 0xF
 834              	@ 0 "" 2
 835              		.thumb
 836              		.syntax unified
 837              	.LBE97:
 838              	.LBE96:
 322:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Disable the MPU */
 323:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   MPU->CTRL = 0;
 839              		.loc 1 323 3 view .LVU187
 840              		.loc 1 323 13 is_stmt 0 view .LVU188
 841 0004 0022     		movs	r2, #0
 842 0006 014B     		ldr	r3, .L50
 324:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 57


 843              		.loc 1 324 1 view .LVU189
 844              		@ sp needed
 323:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 845              		.loc 1 323 13 view .LVU190
 846 0008 5A60     		str	r2, [r3, #4]
 847              		.loc 1 324 1 view .LVU191
 848 000a 7047     		bx	lr
 849              	.L51:
 850              		.align	2
 851              	.L50:
 852 000c 90ED00E0 		.word	-536810096
 853              		.cfi_endproc
 854              	.LFE59:
 856              		.section	.text.HAL_MPU_Enable,"ax",%progbits
 857              		.align	1
 858              		.global	HAL_MPU_Enable
 859              		.syntax unified
 860              		.code	16
 861              		.thumb_func
 862              		.fpu softvfp
 864              	HAL_MPU_Enable:
 865              	.LVL41:
 866              	.LFB60:
 325:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 326:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 327:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Enable the MPU.
 328:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  MPU_Control Specifies the control mode of the MPU during hard fault,
 329:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          NMI, FAULTMASK and privileged access to the default memory
 330:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *          This parameter can be one of the following values:
 331:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF_NONE
 332:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_HARDFAULT_NMI
 333:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_PRIVILEGED_DEFAULT
 334:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *            @arg MPU_HFNMI_PRIVDEF
 335:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 336:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 337:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 338:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_MPU_Enable(uint32_t MPU_Control)
 339:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 867              		.loc 1 339 1 is_stmt 1 view -0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
 340:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Enable the MPU */
 341:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****    MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 872              		.loc 1 341 4 view .LVU193
 873              		.loc 1 341 30 is_stmt 0 view .LVU194
 874 0000 0123     		movs	r3, #1
 875              		.loc 1 341 16 view .LVU195
 876 0002 044A     		ldr	r2, .L53
 877              		.loc 1 341 30 view .LVU196
 878 0004 0343     		orrs	r3, r0
 879              		.loc 1 341 16 view .LVU197
 880 0006 5360     		str	r3, [r2, #4]
 342:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Data Synchronization Barrier setup */
 343:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   __DSB();
 881              		.loc 1 343 3 is_stmt 1 view .LVU198
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 58


 882              	.LBB98:
 883              	.LBI98:
 877:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 884              		.loc 3 877 27 view .LVU199
 885              	.LBB99:
 879:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 886              		.loc 3 879 3 view .LVU200
 887              		.syntax divided
 888              	@ 879 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 889 0008 BFF34F8F 		dsb 0xF
 890              	@ 0 "" 2
 891              		.thumb
 892              		.syntax unified
 893              	.LBE99:
 894              	.LBE98:
 344:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Instruction Synchronization Barrier setup */
 345:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   __ISB();
 895              		.loc 1 345 3 view .LVU201
 896              	.LBB100:
 897              	.LBI100:
 866:smtc_bsp/arm/cmsis/cmsis_gcc.h **** {
 898              		.loc 3 866 27 view .LVU202
 899              	.LBB101:
 868:smtc_bsp/arm/cmsis/cmsis_gcc.h **** }
 900              		.loc 3 868 3 view .LVU203
 901              		.syntax divided
 902              	@ 868 "smtc_bsp/arm/cmsis/cmsis_gcc.h" 1
 903 000c BFF36F8F 		isb 0xF
 904              	@ 0 "" 2
 905              		.thumb
 906              		.syntax unified
 907              	.LBE101:
 908              	.LBE100:
 346:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 347:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 909              		.loc 1 347 1 is_stmt 0 view .LVU204
 910              		@ sp needed
 911 0010 7047     		bx	lr
 912              	.L54:
 913 0012 C046     		.align	2
 914              	.L53:
 915 0014 90ED00E0 		.word	-536810096
 916              		.cfi_endproc
 917              	.LFE60:
 919              		.section	.text.HAL_MPU_ConfigRegion,"ax",%progbits
 920              		.align	1
 921              		.global	HAL_MPU_ConfigRegion
 922              		.syntax unified
 923              		.code	16
 924              		.thumb_func
 925              		.fpu softvfp
 927              	HAL_MPU_ConfigRegion:
 928              	.LVL42:
 929              	.LFB61:
 348:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 349:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** /**
 350:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @brief  Initialize and configure the Region and the memory to be protected.
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 59


 351:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
 352:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   *                the initialization and configuration information.
 353:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   * @retval None
 354:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   */
 355:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
 356:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** {
 930              		.loc 1 356 1 is_stmt 1 view -0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 357:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 358:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
 934              		.loc 1 358 3 view .LVU206
 359:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
 935              		.loc 1 359 3 view .LVU207
 360:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 361:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Set the Region number */
 362:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   MPU->RNR = MPU_Init->Number;
 936              		.loc 1 362 3 view .LVU208
 356:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   /* Check the parameters */
 937              		.loc 1 356 1 is_stmt 0 view .LVU209
 938 0000 10B5     		push	{r4, lr}
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 4, -8
 941              		.cfi_offset 14, -4
 942              		.loc 1 362 12 view .LVU210
 943 0002 124A     		ldr	r2, .L59
 944              		.loc 1 362 22 view .LVU211
 945 0004 4379     		ldrb	r3, [r0, #5]
 946              		.loc 1 362 12 view .LVU212
 947 0006 9360     		str	r3, [r2, #8]
 363:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 364:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   if ((MPU_Init->Enable) == MPU_REGION_ENABLE)
 948              		.loc 1 364 3 is_stmt 1 view .LVU213
 949              		.loc 1 364 6 is_stmt 0 view .LVU214
 950 0008 0179     		ldrb	r1, [r0, #4]
 951 000a 0129     		cmp	r1, #1
 952 000c 1AD1     		bne	.L56
 365:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 366:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Check the parameters */
 367:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
 953              		.loc 1 367 5 is_stmt 1 view .LVU215
 368:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
 954              		.loc 1 368 5 view .LVU216
 369:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
 955              		.loc 1 369 5 view .LVU217
 370:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
 956              		.loc 1 370 5 view .LVU218
 371:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
 957              		.loc 1 371 5 view .LVU219
 372:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
 958              		.loc 1 372 5 view .LVU220
 373:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
 959              		.loc 1 373 5 view .LVU221
 374:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 375:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Set the base adsress and set the 4 LSB to 0 */
 376:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RBAR = (MPU_Init->BaseAddress) & 0xfffffff0U;
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 60


 960              		.loc 1 376 5 view .LVU222
 961              		.loc 1 376 41 is_stmt 0 view .LVU223
 962 000e 0F23     		movs	r3, #15
 963 0010 0468     		ldr	r4, [r0]
 964 0012 9C43     		bics	r4, r3
 965              		.loc 1 376 15 view .LVU224
 966 0014 D460     		str	r4, [r2, #12]
 377:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** 
 378:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     /* Fill the field RASR */
 379:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = ((uint32_t)MPU_Init->DisableExec        << MPU_RASR_XN_Pos)   |
 967              		.loc 1 379 5 is_stmt 1 view .LVU225
 968              		.loc 1 379 18 is_stmt 0 view .LVU226
 969 0016 837A     		ldrb	r3, [r0, #10]
 380:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 381:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsShareable        << MPU_RASR_S_Pos)    |
 382:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 383:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 385:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 970              		.loc 1 385 18 view .LVU227
 971 0018 8479     		ldrb	r4, [r0, #6]
 379:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 972              		.loc 1 379 57 view .LVU228
 973 001a 1B07     		lsls	r3, r3, #28
 974              		.loc 1 385 57 view .LVU229
 975 001c 6400     		lsls	r4, r4, #1
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 976              		.loc 1 384 79 view .LVU230
 977 001e 2343     		orrs	r3, r4
 380:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 978              		.loc 1 380 18 view .LVU231
 979 0020 447A     		ldrb	r4, [r0, #9]
 380:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->AccessPermission   << MPU_RASR_AP_Pos)   |
 980              		.loc 1 380 57 view .LVU232
 981 0022 2406     		lsls	r4, r4, #24
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 982              		.loc 1 384 79 view .LVU233
 983 0024 2343     		orrs	r3, r4
 381:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 984              		.loc 1 381 18 view .LVU234
 985 0026 C47A     		ldrb	r4, [r0, #11]
 381:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsCacheable        << MPU_RASR_C_Pos)    |
 986              		.loc 1 381 57 view .LVU235
 987 0028 A404     		lsls	r4, r4, #18
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 988              		.loc 1 384 79 view .LVU236
 989 002a 2343     		orrs	r3, r4
 382:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 990              		.loc 1 382 18 view .LVU237
 991 002c 047B     		ldrb	r4, [r0, #12]
 382:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->IsBufferable       << MPU_RASR_B_Pos)    |
 992              		.loc 1 382 57 view .LVU238
 993 002e 6404     		lsls	r4, r4, #17
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 994              		.loc 1 384 79 view .LVU239
 995 0030 2343     		orrs	r3, r4
 383:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 61


 996              		.loc 1 383 18 view .LVU240
 997 0032 447B     		ldrb	r4, [r0, #13]
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 998              		.loc 1 384 18 view .LVU241
 999 0034 C079     		ldrb	r0, [r0, #7]
 1000              	.LVL43:
 383:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->SubRegionDisable   << MPU_RASR_SRD_Pos)  |
 1001              		.loc 1 383 57 view .LVU242
 1002 0036 2404     		lsls	r4, r4, #16
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 1003              		.loc 1 384 79 view .LVU243
 1004 0038 2343     		orrs	r3, r4
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 1005              		.loc 1 384 57 view .LVU244
 1006 003a 0002     		lsls	r0, r0, #8
 384:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Size               << MPU_RASR_SIZE_Pos) |
 1007              		.loc 1 384 79 view .LVU245
 1008 003c 0343     		orrs	r3, r0
 1009              		.loc 1 385 79 view .LVU246
 1010 003e 0B43     		orrs	r3, r1
 1011              	.L58:
 386:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****                 ((uint32_t)MPU_Init->Enable             << MPU_RASR_ENABLE_Pos);
 387:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 388:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   else
 389:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   {
 390:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RBAR = 0x00U;
 391:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1012              		.loc 1 391 5 is_stmt 1 view .LVU247
 392:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 393:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c **** }
 1013              		.loc 1 393 1 is_stmt 0 view .LVU248
 1014              		@ sp needed
 391:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****   }
 1015              		.loc 1 391 15 view .LVU249
 1016 0040 1361     		str	r3, [r2, #16]
 1017              		.loc 1 393 1 view .LVU250
 1018 0042 10BD     		pop	{r4, pc}
 1019              	.LVL44:
 1020              	.L56:
 390:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1021              		.loc 1 390 5 is_stmt 1 view .LVU251
 390:smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Src/stm32l0xx_hal_cortex.c ****     MPU->RASR = 0x00U;
 1022              		.loc 1 390 15 is_stmt 0 view .LVU252
 1023 0044 0023     		movs	r3, #0
 1024 0046 D360     		str	r3, [r2, #12]
 1025 0048 FAE7     		b	.L58
 1026              	.L60:
 1027 004a C046     		.align	2
 1028              	.L59:
 1029 004c 90ED00E0 		.word	-536810096
 1030              		.cfi_endproc
 1031              	.LFE61:
 1033              		.text
 1034              	.Letext0:
 1035              		.file 4 "user_app/mcu_core/stm32l073xx.h"
 1036              		.file 5 "/Applications/STM32CubeIDE.app/Contents/Eclipse/plugins/com.st.stm32cube.ide.mcu.external
 1037              		.file 6 "/Applications/STM32CubeIDE.app/Contents/Eclipse/plugins/com.st.stm32cube.ide.mcu.external
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 62


 1038              		.file 7 "user_app/mcu_core/system_stm32l0xx.h"
 1039              		.file 8 "smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
 1040              		.file 9 "smtc_bsp/arm/stm32/stm32_hal/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
ARM GAS  /var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s 			page 63


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32l0xx_hal_cortex.c
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:14     .text.HAL_NVIC_SetPriority:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:22     .text.HAL_NVIC_SetPriority:0000000000000000 HAL_NVIC_SetPriority
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:133    .text.HAL_NVIC_SetPriority:000000000000004c $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:139    .text.HAL_NVIC_EnableIRQ:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:146    .text.HAL_NVIC_EnableIRQ:0000000000000000 HAL_NVIC_EnableIRQ
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:186    .text.HAL_NVIC_EnableIRQ:0000000000000014 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:191    .text.HAL_NVIC_DisableIRQ:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:198    .text.HAL_NVIC_DisableIRQ:0000000000000000 HAL_NVIC_DisableIRQ
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:267    .text.HAL_NVIC_DisableIRQ:000000000000001c $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:272    .text.HAL_NVIC_SystemReset:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:279    .text.HAL_NVIC_SystemReset:0000000000000000 HAL_NVIC_SystemReset
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:339    .text.HAL_NVIC_SystemReset:0000000000000014 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:347    .text.HAL_SYSTICK_Config:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:354    .text.HAL_SYSTICK_Config:0000000000000000 HAL_SYSTICK_Config
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:455    .text.HAL_SYSTICK_Config:000000000000002c $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:461    .text.HAL_NVIC_GetPriority:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:468    .text.HAL_NVIC_GetPriority:0000000000000000 HAL_NVIC_GetPriority
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:540    .text.HAL_NVIC_GetPriority:0000000000000034 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:548    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:555    .text.HAL_NVIC_SetPendingIRQ:0000000000000000 HAL_NVIC_SetPendingIRQ
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:594    .text.HAL_NVIC_SetPendingIRQ:0000000000000014 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:599    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:606    .text.HAL_NVIC_GetPendingIRQ:0000000000000000 HAL_NVIC_GetPendingIRQ
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:651    .text.HAL_NVIC_GetPendingIRQ:0000000000000018 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:656    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:663    .text.HAL_NVIC_ClearPendingIRQ:0000000000000000 HAL_NVIC_ClearPendingIRQ
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:706    .text.HAL_NVIC_ClearPendingIRQ:0000000000000018 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:711    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:718    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000000 HAL_SYSTICK_CLKSourceConfig
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:756    .text.HAL_SYSTICK_CLKSourceConfig:0000000000000018 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:761    .text.HAL_SYSTICK_Callback:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:768    .text.HAL_SYSTICK_Callback:0000000000000000 HAL_SYSTICK_Callback
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:782    .text.HAL_SYSTICK_IRQHandler:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:789    .text.HAL_SYSTICK_IRQHandler:0000000000000000 HAL_SYSTICK_IRQHandler
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:811    .text.HAL_MPU_Disable:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:818    .text.HAL_MPU_Disable:0000000000000000 HAL_MPU_Disable
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:852    .text.HAL_MPU_Disable:000000000000000c $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:857    .text.HAL_MPU_Enable:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:864    .text.HAL_MPU_Enable:0000000000000000 HAL_MPU_Enable
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:915    .text.HAL_MPU_Enable:0000000000000014 $d
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:920    .text.HAL_MPU_ConfigRegion:0000000000000000 $t
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:927    .text.HAL_MPU_ConfigRegion:0000000000000000 HAL_MPU_ConfigRegion
/var/folders/bq/yv49bw8j2kd6w3hsq868qv180000gn/T//ccMFA579.s:1029   .text.HAL_MPU_ConfigRegion:000000000000004c $d

NO UNDEFINED SYMBOLS
